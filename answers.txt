1.  What is a gitignore file and what should it include for a Java project? 

Ans: The .gitignore file instructs git to not track and ignore certain files or directories. For a Java project, the commonly ignored files added to .gitignore are

# Project files
*.class
*.classpath
*.project
*.idea/
bin/
*.iml

# Log file
*.log

# BlueJ files
*.ctxt

# Mobile Tools for Java (J2ME)
.mtj.tmp/

# Package Files #
*.jar
*.war
*.nar
*.ear
*.zip
*.tar.gz
*.rar

# virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xml
hs_err_pid*

2. What does fast-forward in git mean?
Ans: Fast-forward in git is a type of merge which points the merged branch to the master branch. In this situation, git avoids creating a new merge commit and simply appends the merged branch to the master, pointing the source branch pointer to it.

However, it is important to note that git performs a fast-forward merge only when there is no conflict between the master branch and the branch being merged.

3. Why should you have different branches?

Ans: Branching in git allows users to isolate from the main line of work to a different area where they can contribute without disrupting the main line.

Branching is extremely useful as it provides a way to effectively collaborate and manage code, allowing developers to work independently	 on multiple features simultaneously.

Branching allows create different versions of a software separated from the main working version. It provides a useful way to develop and test new features.

Overall, we must have different branches as it provides a flexible and organized way to manage code changes, providing efficient collaboration, testing, versioning and maintenance.

4. In a project how many remote Git repositories do you usually have? 

Ans: The number of remote repositories in a project depends on a number of factors such as the size, time, complexity and the architecture. Normally a small to medium sized monolithic application may have just one repository. Wheres, a large micro service architecture may have more than one repositories to manage independent services or component.

Ultimately, the number of remote Git repositories in a project depends on the needs and requirements of the project and the teams involved. It's important to choose the number of repositories based on the balance between organization, collaboration, and efficiency.
